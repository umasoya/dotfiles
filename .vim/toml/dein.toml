## {{{ Template
#[[plugins]]
#repo = 
## }}}

## {{{ Options
# on_i = 1			: Load plugin when into insert mode.
# on_event = 'InsertCharPre'	: Load plugin when event run.
# on_ft = ['ft']		: Load plugin when ft is 'ft'.
# on_path = .*			: Load plugin when it is same buffer name.
# on_source = ['other plugin']	: Load plugin when 'other plugin' loaded.
# on_cmd = ['cmd']		: Load plugin when to run the 'cmd'.
# on_map = ['mapping']		: Mapping version of on_cmd.
# depends = ['depend plugin']	: If exist depens, load 'depend plugin' first.
# if
## }}}

## {{{ Hooks
##--------------------------------------------------------##
#   name           |  When run         | lazy off | lazy on#
#----------------------------------------------------------#
# hook_add         | When load plugin  |    OK    |   NG   #
# hook_source      | Before load plugin|    NG    |   OK   #
# hook_post_source | After load plugin |    NG    |   OK   #
# hook_post_updae  | When update plugin|    OK    |   OK   #
##--------------------------------------------------------##
## }}}

[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # Switch ft according to the context of the cursor position
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # Detect ft according to the context of the cursor position
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neocomplete.vim'
hook_add = '''
  " Enable Neocomplete
  let g:neocomplete#enable_at_startup = 1
  " Enable smart case
  let g:neocomplete#enable_smart_case = 1
  " Enable autocomplete separate underscore
  let g:neocomplete#enable_underbar_completion = 1
  let g:neocomplete#enable_camel_completion = 1
  " Max list
  let g:neocomplete#max_list = 20
  " Min cache length
  let g:neocomplete#sources#syntax#min_keyword_length = 3
  " Max cache length
  let g:neocomplete#max_keyword_width = 10000
  " set dictionary path
  let s:neco_dicts_dir = $HOME . '/.vim/dicts'
  if isdirectory(s:neco_dicts_dir)
    " load dict file
  endif
'''

[[plugins]]
repo = 'ujihisa/neco-look'
depends = ['neocomplete.vim']
hook_add = '''
  let g:neocomplete#text_mode_filetype = { "_" : 1 }
'''

[[plugins]] # Required +python module
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
repo = 'thinca/vim-splash'
hook_add = 'let g:splash#path = expand("$HOME/dotfiles/.vim/splash")'

[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
  " emmet expand <C-y> + ,
  let g:user_emmet_leader_key='<C-y>'
  let g:user_emmet_settings = {
        \'variables' : {
        \'lang' : 'ja'
        \},
        \}
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:quickrun_config = {'*': {'split': ''}}
  " Nice and split
  set splitright
  set splitbelow
'''

[[plugins]]
repo = 'evanmiller/nginx-vim-syntax'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = 'nnoremap <silent><C-e> :NERDTreeToggle<CR>'

[[plugins]]
repo = 'digitaltoad/vim-pug'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  " autorun vim-indent-guide
  let g:indent_guides_enable_on_vim_startup = 1
  " disable auto-colors
  let g:indent_guides_auto_colors=0
  " set guide size
  let g:indent_guides_guide_size = 2
  " set bg color Odd
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=8
  " set bg color Even
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=16
  " set guide start revel
  let g:indent_guides_start_level = 2
'''

[[plugins]]
repo = 'moll/vim-node'

[[plugins]]
repo = 'ekalinin/Dockerfile.vim'

[[plugins]] # brackets
repo = 'tpope/vim-surround'

# Toggle single line split to multi line / multi line join to single line
# gS/gJ
[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'

[[plugins]]
repo = 'tomtom/tcomment_vim'
hook_add = '''
  nmap ,// :TComment<CR>
  " If visual-block mode, TCommentInline
  " else TCommentBlock
  vmap <expr> ,// mode() == '<C-v>'?':TCommentInline<CR>':':TCommentBlock<CR>'
'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'junegunn/vim-emoji'

[[plugins]]
repo = 'tpope/vim-speeddating'

[[plugins]] # dummy-data generator :fake#gen({keyname})
repo = 'tkhren/vim-fake'

#[[plugins]]
#repo = 'ap/vim-css-color'
#on_ft = ['css']

[[plugins]]
repo = 'lilydjwg/colorizer'

[[plugins]] # Read PHP manual on vim
repo = 'alvan/vim-php-manual'
on_ft = ['php']

[[plugins]]
repo = 'flyinshadow/php_localvarcheck.vim'
on_ft = ['php']
hook_add = '''
  let g:php_localvarcheck_enable = 1
  let g:php_localvarcheck_global = 0
'''

[[plugins]]
repo = 'shawncplus/phpcomplete.vim'
on_ft = 'php'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
let g:go_hightlight_functions = 1  
let g:go_hightlight_methods = 1  
let g:go_hightlight_structs = 1  
let g:go_hightlight_interfaces = 1  
let g:go_hightlight_operators = 1  
let g:go_hightlight_build_constraints = 1  
" Auto-run :GoFmt when writing file
autocmd FileType go autocmd BufWritePre <buffer> GoFmt
'''

[[plugins]] # Syntax *.tpl
repo = 'blueyed/smarty.vim'
on_ft = ['smarty']

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'stephpy/vim-yaml'
on_ft = ['yml', 'yaml']

[[plugins]]
repo = 'jelera/vim-javascript-syntax'
on_ft = ['javascript']

[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']

[[plugins]] # sql syntax
repo = 'shmup/vim-sql-syntax'
on_ft = ['sql']

[[plugins]] # syntax for nginx files
repo = 'moskytw/nginx-contrib-vim'

[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
" Start interactive EasyAlign in visual mode (e.g. vipga)
" Example: *vipga=*
" *v*isual-select *i*nner *p*aragraph
" Start EasyAlign cmd *ga*
" Align around *=*
xmap ga <Plug>(EasyAlign)
" Example: *gaip=*
" Start EasyAlign cmd *ga*
" Align around*=*
nmap ga <Plug>(EasyAlign)
'''

[[plugins]] # check http status
repo = 'mattn/httpstatus-vim'

[[plugins]] # Generate PHP document blocks
repo = 'vim-scripts/PDV--phpDocumentor-for-Vim'
on_ft = ['php']
hook_add = '''
inoremap <C-P> <ESC>:call PhpDocSingle()<CR>i
nnoremap <C-P> :call PhpDocSingle()<CR>
vnoremap <C-P> :call PhpDocRange()<CR>
'''
hook_post_source = '''
let g:pdv_cfg_Type = "mixed"
let g:pdv_cfg_Package = ""
let g:pdv_cfg_Version = ""
let g:pdv_cfg_Author = ""
let g:pdv_cfg_Copyright = ""
let g:pdv_cfg_License = ""
'''
